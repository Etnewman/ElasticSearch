{
    "on_failure" : [
      {
        "set" : {
          "field" : "error.message",
          "value" : "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "description" : "Pipeline for parsing elasticsearch slow logs.",
    "processors" : [
      {
        "set" : {
          "field" : "event.ingested",
          "value" : "{{_ingest.timestamp}}"
        }
      },
      {
        "set" : {
          "copy_from" : "@timestamp",
          "field" : "event.created"
        }
      },
      {
        "grok" : {
          "pattern_definitions" : {
            "CHAR" : "."
          },
          "field" : "message",
          "patterns" : [
            "^%{CHAR:first_char}"
          ]
        }
      },
      {
        "pipeline" : {
          "if" : "ctx.first_char != '{'",
          "name" : "filebeat-8.6.2-elasticsearch-slowlog-pipeline-plaintext"
        }
      },
      {
        "pipeline" : {
          "if" : "ctx.first_char == '{'",
          "name" : "filebeat-8.6.2-elasticsearch-slowlog-pipeline-json"
        }
      },
      {
        "remove" : {
          "field" : [
            "elasticsearch.slowlog.timestamp",
            "elasticsearch.server.@timestamp"
          ],
          "ignore_missing" : true
        }
      },
      {
        "script" : {
          "lang" : "painless",
          "source" : "ctx.event.duration = Math.round(ctx.elasticsearch.slowlog.duration * params.scale)",
          "params" : {
            "scale" : 1000000
          },
          "if" : "ctx.elasticsearch.slowlog?.duration != null"
        }
      },
      {
        "remove" : {
          "ignore_missing" : true,
          "field" : "elasticsearch.slowlog.duration"
        }
      },
      {
        "set" : {
          "field" : "event.kind",
          "value" : "event"
        }
      },
      {
        "set" : {
          "field" : "event.category",
          "value" : "database"
        }
      },
      {
        "script" : {
          "lang" : "painless",
          "source" : "def errorLevels = ['FATAL', 'ERROR']; if (ctx?.log?.level != null) {\n  if (errorLevels.contains(ctx.log.level)) {\n    ctx.event.type = 'error';\n  } else {\n    ctx.event.type = 'info';\n  }\n}"
        }
      },
      {
        "set" : {
          "ignore_empty_value" : true,
          "field" : "host.name",
          "value" : "{{elasticsearch.node.name}}"
        }
      },
      {
        "set" : {
          "field" : "host.id",
          "value" : "{{elasticsearch.node.id}}",
          "ignore_empty_value" : true
        }
      },
      {
        "remove" : {
          "field" : [
            "first_char"
          ]
        }
      }
    ]
  }
