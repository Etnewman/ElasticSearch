#!/bin/bash
#			    Unclassified
#
#########################################################################
############ AN-GSQ-272 SCRIPT HEADER VERSION 6.1 2021.03.08 ############
#
# Purpose: Installs a Kibana instance
#
# Tracking #: CR-2020-OADCGS-086
#
# File name: instalKibana.sh
#
# Location: "install" directory of elastic repo on repo server
#
# Version: 1.0
#
# Revisions: Provide version history to include version number,
#            applicable Tracking, Author’s Name, ate it was revised,
#            Explain what was changed.
#   version, RFC, Author’s name, date (yyyy-mm-dd): comments
#   v1.00, CR-2020-OADCGS-086, Steve Truxal, 2020-05-26: Original Version
#
# Site/System: Repo Server (ro01)
#
# Deficiency: N/A
#
# Use: This script is used by the Elastic Installer
#
# Users: Elastic Installer sudoed to root user
#
# DAC Setting: 755 apache apache
# Required SELinux Security Context : httpd_sys_content_t
#
# Frequency: During Elasticsearch initial install
#
# Information Security Authorization
# ACC/A26 IA Approval: year-mm-dd, Name, ACC ISSE
#
# Lead System Engineering Authorization
# AF-DCGS LSE Approval: year-mm-dd, Name, AF-DCGS/AO
#
###########################################################################
#

cachain="cachain.pem"
certdir="/etc/kibana/certs"
elasticpw="elastic"

################################################################
#
# Function: bootstrapKibanaUser
#
# Desc: This function updates the kibana user password with a randomly
#       generated password and place this password in the kibana
#       keystore.
#
# Note: This function is not harmful if run more than once but
#       kibana must be restarted if it was running.
#
#       The user name is generated by appending the last two
#       characters of the hostname to the string "kibana".
#       Since we currently run kibana on elastic nodes this
#       will be the number of the node where the instance of
#       kibana is running.  (ex:  kibana-01 )
#
###############################################################
function bootstrapKibanaUser() {

  kbuser=kibana-$(hostname | cut -c 10,11)

  # Generate random password for kibana user
  pass=$(tr -cd '[:alnum:]' </dev/urandom | fold -w15 | head -n1)

  ###### Bootstrap Kibana User users
  # First check to see if user already exists
  user=$(curl -k -u elastic:$elasticpw https://elastic-node-1:9200/_security/user/"$kbuser")
  if [ "$user" == "{}" ]; then
    echo "User does not exist, create it"
    curl -k -u elastic:$elasticpw -XPOST -H 'Content-Type: application/json' "https://elastic-node-1:9200/_security/user/$kbuser" -d "{\"password\":\"$pass\",\"roles\": \"kibana_system\", \"full_name\" : \"$kbuser User\"}"
  else
    echo "User exists, Just update password"
    curl -k -u elastic:$elasticpw -XPUT -H 'Content-Type: application/json' "https://elastic-node-1:9200/_security/user/$kbuser/_password" -d "{\"password\":\"$pass\"}"
  fi

  ## Only attempt to create keystore if it doesn't already exist
  if [ ! -f /var/lib/kibana/kibana.keystore ]; then
    /usr/share/kibana/bin/kibana-keystore create
  fi

  # Add elasticsearch.username to keystore
  /usr/share/kibana/bin/kibana-keystore remove elasticsearch.username
  echo "$kbuser" | /usr/share/kibana/bin/kibana-keystore add elasticsearch.username --stdin

  # Add elasticsearch.password to keystore
  /usr/share/kibana/bin/kibana-keystore remove elasticsearch.password
  echo "$pass" | /usr/share/kibana/bin/kibana-keystore add elasticsearch.password --stdin

}

#
# Check to make sure we have PKI Certificates for this install
#
# Note:  The convention for naming elastic certificates is <hostname>.crt / <hostname>.key
#
function checkCerts() {

  # On a new install the PKI certificates for Kibana must be put in place
  # verify initial keystore exists on repo server
  kbhost=$(hostname -f | cut -f1 -d".")
  fileloc="satrepo/pulp/content/oadcgs/Library/custom/Elastic_Client/Elastic_Files"
  # First check to make sure public cert is there
  status=$(curl --head --silent https://"$fileloc"/certs/"$kbhost".crt | head -n 1)
  echo "$status"
  if ! echo "$status" | grep -q OK; then
    echo "Public certificate for $kbhost not found on $fileloc, add to certs directory in elastic repo and run script again."
    exit
  fi

  # Next check to make sure private cert is there
  status=$(curl --head --silent https://"$fileloc"/certs/"$kbhost".key | head -n 1)
  echo "$status"
  if echo "$status" | grep -q 404; then
    echo "Private key for $kbhost not found on $fileloc, add to certs directory in elastic repo and run script again."
    exit
  fi
  # Next check to make sure root cert is there
  status=$(curl --head --silent https://"$fileloc"/certs/elastic_cachain.pem | head -n 1)
  if echo "$status" | grep -q 404; then
    echo "Root certificate not found on $fileloc, add to certs directory in elastic repo and run script again."
    exit
  fi
}

#
# Function to copy nodes PKI certificates
#
function getCerts() {
  # Create Directory for TLS certificates in kibana folder created on installation
  mkdir /etc/kibana/certs

  # Pull over certs and generate pkcs8 file for key

  kbhost=$(hostname -f | cut -f1 -d".")
  fileloc="satrepo/pulp/content/oadcgs/Library/custom/Elastic_Client/Elastic_Files"
  curl --silent https://"$fileloc"/certs/"$kbhost".crt >$certdir/"$kbhost".crt
  curl --silent https://"$fileloc"/certs/"$kbhost".key >$certdir/"$kbhost".key
  # Get root CA from elastic install directory just incase root is different
  curl --silent https://"$fileloc"/certs/elastic_cachain.pem >$certdir/$cachain

}

#
# Function to create override file for Kibana service and sets StanardOutput to null
#
function createKibanaOverride() {

  case $1 in
  1)
    es1=1
    es2=2
    es3=3
    ;;
  2 | 3)
    es1=6
    es2=7
    es3=8
    ;;
  *)
    echo "Unsupported Cluster size for DCGS: $1"
    exit
    ;;
  esac

  mkdir -p /etc/systemd/system/kibana.service.d
  touch /etc/systemd/system/kibana.service.d/override.conf
  cat <<EOF >/etc/systemd/system/kibana.service.d/override.conf
[Service]
StandardOutput=null
Environment="ESHOST1=https://elastic-node-${es1}:9200"
Environment="ESHOST2=https://elastic-node-${es2}:9200"
Environment="ESHOST3=https://elastic-node-${es3}:9200"
EOF
  systemctl daemon-reload
}

####################
# Main begins here #
####################

# Check to make sure kibana is not already installed
# Note: If Kibana is installed, direct to upgrade steps.
#
if systemctl list-units --type=service -all | grep -Fq kibana; then
  echo "kibana service is already installed, check instructions for upgrade steps..."
  exit
fi

echo
echo "*** NOTICE *** "
echo "This script will install Kibana on this computer..."
echo
read -p "Would you like to proceed with the installation? <y/n> " -n 1 -r </dev/tty
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
  echo "Aborting script..."
  exit 1
fi

numNodes=0
while [[ ($numNodes -lt 1 || $numNodes -gt 3) ]]; do
  echo "How many Elasticsearch nodes will there be in this cluster?"
  echo "Options:"
  echo "   Enter 1 for 7 Nodes"
  echo "   Enter 2 for 10 Nodes"
  echo "   Enter 3 for 15 Nodes"
  read -p "Enter a value (1-3): " -r numNodes </dev/tty
  echo
done

echo "This script will preform a new install of Kibana..."
checkCerts
yum -y install kibana
getCerts

# Enable network access
setsebool -P httpd_can_network_connect=on

# configure directories
mkdir /var/log/kibana
chown root:kibana /var/log/kibana
chmod 770 /var/log/kibana

bootstrapKibanaUser

createKibanaOverride "$numNodes"

echo "Kibana installation complete..."
#################################################################################
#
#			    Unclassified
#
#################################################################################
